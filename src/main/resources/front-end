<!DOCTYPE html>
<html>
<head>
    <title>Private Chat</title>
    <script src="https://cdn.jsdelivr.net/npm/sockjs-client@1.5.2/dist/sockjs.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/stompjs@2.3.3/lib/stomp.min.js"></script>
</head>
<body>
    <h2>Private Chat</h2>
    <input id="sender" placeholder="Your username"/>
    <input id="receiver" placeholder="Receiver username"/>
    <input id="message" placeholder="Message"/>
    <button onclick="sendMessage()">Send</button>

    <ul id="chat"></ul>

    <script>
        let stompClient;
        const socket = new SockJS('/ws-chat');
        stompClient = Stomp.over(socket);
        stompClient.connect({}, function(frame) {
            console.log('Connected: ' + frame);
        });

        function sendMessage() {
            const sender = document.getElementById('sender').value;
            const receiver = document.getElementById('receiver').value;
            const content = document.getElementById('message').value;

            stompClient.send("/app/chat", {}, JSON.stringify({
                sender: {username: sender},
                receiver: {username: receiver},
                content: content
            }));

            // Subscribe to own queue
            stompClient.subscribe(`/user/${sender}/queue/messages`, function(msg){
                const message = JSON.parse(msg.body);
                const li = document.createElement("li");
                li.innerText = message.sender.username + ": " + message.content;
                document.getElementById("chat").appendChild(li);
            });
        }
    </script>
</body>
</html>


Note: sha.getUser() returns the authenticated Principal. For that to be populated in WebSocket connections, you must set the Principal when the STOMP CONNECT is processed — see the frontend code below where we pass JWT and server resolves token to Principal (this is already supported if the JwtFilter populates SecurityContext for the HTTP handshake or you implement a HandshakeInterceptor to authenticate WebSocket connect requests — simpler approach below: pass token in connect headers and implement a Principal extractor if needed). If you prefer, I can add a HandshakeInterceptor class that resolves JWT into a Principal — I included a simple approach in the frontend that STOMP client sends the token during the connect headers (works with Spring if you configure DefaultHandshakeHandler or a HandshakeInterceptor that reads Authorization header). If you want I will add that file too.